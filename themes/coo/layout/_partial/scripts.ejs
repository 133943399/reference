<%- js('js/main.js') %>

<% if (is_post() && page.plugins != undefined && page.plugins.includes("tooltip") ){ %>
    <script src="https://unpkg.com/@popperjs/core@2"></script>
    <script src="https://unpkg.com/tippy.js@6"></script>
    <script>
        window.addEventListener('DOMContentLoaded', () => {
            if (typeof (tippy) !== 'undefined') {
                document.querySelectorAll("a[data-tooltip]").forEach(function (x) {
                    let content = x.getAttribute('data-tooltip');
                    tippy(x, {content: content});
                });
            }
        });
    </script>
<% } %>

<% if (is_post() && page.plugins != undefined && page.plugins.includes("katex") ){ %>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.js" crossorigin="anonymous"></script>
    <script>
        document.querySelectorAll('code').forEach(function (el) {
            const text = el.textContent;
            if (text.startsWith('KaTeX:') || el.classList.contains("language-KaTeX")) {
                // Do stuff if text starts with `latex`
                const renderedKatex = katex.renderToString(
                    text.replace('KaTeX:', ''),
                    {throwOnError: false}
                );
                // Populate katex and additional markup for formatting
                el.outerHTML = `<span class="katex-wrap">${renderedKatex}</span>`;
            }

        })
    </script>
<% } %>


<% if (is_post() && page.plugins != undefined && page.plugins.includes("copyCode") ){ %>
    <script>
        // Get all pre > code elements
        const codeBlocks = document.querySelectorAll('pre > code');
        const initInnerHTML = '<svg height="1em" fill="currentColor" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill-rule="evenodd" d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z"></path> </svg>';
        const successInnerHTML = '<svg height="1em" fill="currentColor" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z"></path></svg>';
        codeBlocks.forEach(function (codeBlock) {
            // Create a copy button element
            const copyButton = document.createElement('button');
            copyButton.className = 'bg-emerald-500 p-2 text-white fadeIn shadow-xl rounded flex items-center absolute top-2 right-2';
            copyButton.innerHTML = initInnerHTML;
            copyButton.style.opacity = "0";
            const parent = codeBlock.parentNode;

            parent.style = "position: relative;"
            parent.insertBefore(copyButton, codeBlock);

            // Add click event listener to copy button
            copyButton.addEventListener('click', () => {
                navigator.clipboard.writeText(codeBlock.textContent).then(() => {
                    copyButton.innerHTML = successInnerHTML;
                    setTimeout(() => {
                        copyButton.innerHTML = initInnerHTML;
                    }, 1000);
                });
            });

            parent.addEventListener('mouseenter', () => {
                copyButton.style.opacity = "1";
            });
            parent.addEventListener('mouseleave', () => {
                copyButton.style.opacity = "0";
            });
        });
    </script>
<% } %>


<% if (is_post() && page.plugins != undefined && page.plugins.includes("runCode") ){ %>
    <script src="https://cdn.jsdelivr.net/npm/livecodes@0.7.2/livecodes.umd.js"></script>
    <script>
        // Get all pre > code elements
        const code_Blocks = document.querySelectorAll('pre > code');
        const runInnerHTML = '<svg height="1em" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g stroke-width="0"></g><g stroke-linecap="round" stroke-linejoin="round"></g><g><path d="M16.6582 9.28638C18.098 10.1862 18.8178 10.6361 19.0647 11.2122C19.2803 11.7152 19.2803 12.2847 19.0647 12.7878C18.8178 13.3638 18.098 13.8137 16.6582 14.7136L9.896 18.94C8.29805 19.9387 7.49907 20.4381 6.83973 20.385C6.26501 20.3388 5.73818 20.0469 5.3944 19.584C5 19.053 5 18.1108 5 16.2264V7.77357C5 5.88919 5 4.94701 5.3944 4.41598C5.73818 3.9531 6.26501 3.66111 6.83973 3.6149C7.49907 3.5619 8.29805 4.06126 9.896 5.05998L16.6582 9.28638Z" stroke="currentColor" stroke-width="2" stroke-linejoin="round"></path></g></svg>';
        const pageHeader = (document.querySelector('h1')?.textContent || '').trim();
        code_Blocks.forEach(function (codeBlock) {
            let content = codeBlock.textContent || '';
            let language = [...codeBlock.classList].filter(c => c.startsWith("language-"))[0].replace("language-", "");

            if (['shell', 'bash'].includes(language)) return;

            // Create a run button element
            const runButton = document.createElement('button');
            runButton.className = 'bg-emerald-500 p-2 text-white fadeIn shadow-xl rounded flex items-center absolute top-12 right-2';
            runButton.innerHTML = runInnerHTML;
            runButton.style.opacity = "0";
            const parent = codeBlock.parentNode;

            parent.style = "position: relative;"
            parent.insertBefore(runButton, codeBlock);

            // Add click event listener to run button
            runButton.addEventListener('click', () => {
                if (language === 'ts') {
                    language = 'typescript';
                }
                
                const editorId = ['js', 'javascript', 'typescript', 'python', 'php', 'ruby', 'perl'].includes(language) 
                                    ? 'script' 
                                    : ['css', 'scss'].includes(language) 
                                        ? 'style' 
                                        : 'markup';
                const title = codeBlock.closest('.h3-wrap')?.querySelector('h3')?.textContent.replace('#', '') || '';

                if (language === 'python') {
                    if (content.includes('>>> ')) {
                        content = content
                            .trim()
                            .split('\n')
                            .map(line => line.startsWith('>>> ') ? line.replace('>>> ', '') : `# ${line}`)
                            .join('\n');
                    }
                    if (content.includes('from typing import')) {
                        language = 'python-wasm';
                    }
                }

                const baseConfig = {
                    title,
                    activeEditor: editorId,
                    [editorId]: {
                        language,
                        content,
                    },
                    tools: {
                        status: 'open',
                    }
                }
                let config = baseConfig;

                if (language === 'markdown') {
                    config = {
                        ...baseConfig,
                        style: {
                            language: 'css',
                            content: '@import "github-markdown-css";\n\nbody {\n  border: 1px solid #e1e4e8;\n  border-radius: 4px;\n  padding: 20px;\n  margin: 20px !important;\n}\n',
                        },
                        script: {
                            language: 'javascript',
                            content: 'document.body.classList.add("markdown-body");'
                        },
                        tools: {
                            status: 'open',
                            active: 'compiled',
                        }
                    }
                }

                if (['html', 'css'].includes(language)) {
                    config = {
                        ...baseConfig,
                        tools: {
                            status: 'closed',
                        }
                    }
                }

                if (['scss', 'typescript'].includes(language)) {
                    config = {
                        ...baseConfig,
                        tools: {
                            status: 'open',
                            active: 'compiled',
                        }
                    }
                }

                if (pageHeader.startsWith('jQuery')) {
                    config = {
                        ...baseConfig,
                        markup: {
                            language: 'html',
                            content: `<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></scr` + 'ipt>\n',
                        },
                        tools: {
                            status: 'closed',
                        }
                    }
                }

                if (language === 'html' && pageHeader.startsWith('EJS')) {
                    config = {
                        ...baseConfig,
                        markup: {
                            language: 'ejs',
                            content,
                        },
                        script: {
                            language: 'javascript',
                            content: "window.livecodes.templateData = {\n  userLoggedIn: false,\n  user: { username: 'geddy', email: 'geddy@example.com' },\n  users: [\n    { username: 'geddy', email: 'geddy@example.com' },\n    { username: 'neil', email: 'neil@example.com' },\n    { username: 'alex', email: 'alex@example.com' },\n  ],\n};\n",
                        },
                        tools: {
                            status: 'open',
                        },
                        customSettings: {
                            "template": {
                                "prerender": false,
                            },
                        },
                    }
                }

                if (language === 'javascript' && pageHeader.startsWith('React')) {
                    config = {
                        ...baseConfig,
                        script: {
                            language: 'jsx',
                            content,
                        },
                        customSettings: {
                            imports: {
                                'axios': 'https://cdn.skypack.dev/axios',
                            },
                        },
                    }
                }

                if (['php'].includes(language)) {
                    config = {
                        ...baseConfig,
                        style: {
                            language: 'css',
                            content: 'body { white-space: pre-wrap; }\n',
                        },
                        script: {
                            language: 'php-wasm',
                            content: !content.trim().startsWith('<?php') ? `<?php\n\n${content.trim()}\n\n?>` : content,
                        },
                        tools: {
                            status: 'closed',
                        }
                    }
                }

                const plaugroundUrl = livecodes.getPlaygroundUrl({config});
                window.open(plaugroundUrl, '_blank');
            });

            parent.addEventListener('mouseenter', () => {
                runButton.style.opacity = "1";
            });
            parent.addEventListener('mouseleave', () => {
                runButton.style.opacity = "0";
            });
        });
    </script>
<% } %>
